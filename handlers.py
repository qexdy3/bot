from aiogram import types
from aiogram.filters import Command
from bot import dp
import bot
from config import CITIES, PRODUCTS, PRICES, CONTACTS_MASSAGE, START_MASSAGE, WORK_MASSAGE, LAW_MASSAGE, PRODUCT_MASSAGE
from keyboards import main_menu, city_selection, district_selection, product_selection, payment_button
from payment import create_crypto_invoice
from datetime import datetime, timedelta
import logging
from csv_data import load_csv_from_r2, save_csv_to_r2
from payment import check_payment_status
import asyncio
import random
import string

CSV_FILE = "users.csv"
ORDER_FILE = "orders.csv"
PENDING_INVOICES_FILE = "pending_invoices.csv"


def save_user(user_id, name, username):
    users = load_csv_from_r2(CSV_FILE)
    users = [row for row in users if row]  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

    user_exists = any(str(row[0]) == str(user_id) for row in users)

    if not user_exists:
        reg_date = datetime.now().strftime("%Y-%m-%d")
        users.append([user_id, name, username, reg_date, 0, 0])
        save_csv_to_r2(CSV_FILE, users)


@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    name = message.from_user.first_name
    username = message.from_user.username if message.from_user.username else "–ù–µ—Ç"
    
    save_user(user_id, name, username)
    
    await message.answer(START_MASSAGE, reply_markup=main_menu())

@dp.message(lambda message: message.text == "üö¨ –ö—É–ø–∏—Ç—å üö¨")
async def handle_buy_text(message: types.Message):
    await message.answer(f"üá∞üá¨ –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ\n\n‚§µÔ∏è –í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:", reply_markup=city_selection())

@dp.message(lambda message: message.text == "üö® –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def handle_contact_text(message: types.Message):
    await message.answer(CONTACTS_MASSAGE)

@dp.message(lambda message: message.text == "–†–∞–±–æ—Ç–∞ üòé")
async def handle_contact_text(message: types.Message):
    await message.answer(WORK_MASSAGE)

@dp.message(lambda message: message.text == "–ü—Ä–∞–≤–∏–ª–∞ üìö")
async def handle_contact_text(message: types.Message):
    await message.answer(LAW_MASSAGE)

@dp.message(lambda message: message.text == "‚úÖ –ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ —Ä–∞–π–æ–Ω–∞–º ‚úÖ")
async def handle_contact_text(message: types.Message):
    await message.answer(PRODUCT_MASSAGE)

@dp.message(lambda message: message.text == "‚åõÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤")
async def handle_order_text(message: types.Message):
    try:
        user_id = str(message.from_user.id)  # ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_time = datetime.now()
        updated_orders = []
        valid_orders = []
        
        orders = load_csv_from_r2(ORDER_FILE)
        if not orders:
            await message.answer("–ó–∞–∫–∞–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return
        
        headers = orders[0]  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV
        changed = False  # –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤

        for row in orders[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            order_number, order_user_id, city, district, product, price, status, order_time = row

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞–∫–∞–∑ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if order_user_id != user_id:
                updated_orders.append(row)  # –û—Å—Ç–∞–≤–ª—è–µ–º —á—É–∂–∏–µ –∑–∞–∫–∞–∑—ã
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –∑–∞–∫–∞–∑

            order_time = datetime.strptime(order_time, "%Y-%m-%d %H:%M:%S")

            # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–º –±–æ–ª—å—à–µ —á–∞—Å–∞
            if status == "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã" and (current_time - order_time).total_seconds() > 3600:
                changed = True
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –∑–∞–∫–∞–∑
            
            updated_orders.append(row)

            order_text = (f"üõí –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order_number}\n\n"
                          f"üèô –ì–æ—Ä–æ–¥: {city}\n"
                          f"üìç –†–∞–π–æ–Ω: {district}\n\n"
                          f"üö¨ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {product}\n\n"
                          f"üí∏ –¶–µ–Ω–∞: {price} USDT\n\n"
                          f"‚è≥ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {order_time.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                          f"üìå –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {status}\n")
            valid_orders.append(order_text)
        
        # –ï—Å–ª–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
        if changed:
            save_csv_to_r2(ORDER_FILE, [headers] + updated_orders)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –µ–≥–æ –∑–∞–∫–∞–∑—ã
        if valid_orders:
            for order in valid_orders:
                await message.answer(order)
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")




@dp.message(lambda message: message.text == "–ü—Ä–æ—Ñ–∏–ª—å ü•∑")
async def handle_profile_text(message: types.Message):
    user_id = message.from_user.id
    users = load_csv_from_r2(CSV_FILE)

    for row in users:
        if row and str(row[0]) == str(user_id):
            profile_text = (f"‚ÑπÔ∏è –ü—Ä–æ—Ñ–∏–ª—å\n\n"
                            f"‚ù§Ô∏è –ò–º—è: {row[1]}\n"
                            f"üòé –Æ–∑–µ—Ä: @{row[2] if row[2] != '–ù–µ—Ç' else '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
                            f"üîë ID: {row[0]}\n"
                            f"üÜï –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {row[3]}\n"
                            f"üõí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {row[4]}\n"
                            f"üí∞ –°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: {row[5]} $")
            await message.answer(profile_text)
            return
    
    await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@dp.callback_query(lambda c: c.data.startswith("city_"))
async def choose_district(callback: types.CallbackQuery):
    city = callback.data.split("_")[1]
    await callback.message.edit_text(
        f"üåÜ –ì–æ—Ä–æ–¥: {city}.\n\nüåÉ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",
        reply_markup=district_selection(city)
    )

@dp.callback_query(lambda c: c.data.startswith("district_"))
async def choose_product(callback: types.CallbackQuery):
    district = callback.data.split("_")[1]
    city = callback.message.text.split("\n")[0].replace("\ud83c\udf06 –ì–æ—Ä–æ–¥: ", "")
    
    await callback.message.edit_text(
        f"{city}\n\nüåÉ –†–∞–π–æ–Ω: {district}.\n\nüö¨ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=product_selection(district, PRODUCTS, PRICES)
    )


def get_invoice_by_order_id(order_id):
    """–ò—â–µ—Ç –∏–Ω–≤–æ–π—Å —Å –Ω—É–∂–Ω—ã–º order_id."""
    invoices = load_csv_from_r2(PENDING_INVOICES_FILE)
    
    for row in invoices:
        if row[1] == order_id:  # order_id –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ –≤—Ç–æ—Ä–æ–º —Å—Ç–æ–ª–±—Ü–µ (–∏–Ω–¥–µ–∫—Å 1)
            return row[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º invoice_id (–ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü)
    
    return None  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None


def save_order(invoice_id, user_id, city, district, product, price, status="–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"):
    orders = load_csv_from_r2(ORDER_FILE)
    order_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    orders.append([invoice_id, user_id, city, district, product, price, status, order_time])
    save_csv_to_r2(ORDER_FILE, orders)


def generate_random_id(length=10):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π ID –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã."""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

@dp.callback_query(lambda c: c.data.startswith("product_"))
async def confirm_purchase(callback: types.CallbackQuery):
    product = callback.data.split("_")[1]
    price = PRICES.get(product)
    
    if not price:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    city = callback.message.text.split("\n")[0].replace("\ud83c\udf06 –ì–æ—Ä–æ–¥: ", "")
    district = callback.message.text.split("\n")[2].replace("\ud83c\udf03 –†–∞–π–æ–Ω: ", "")

    order_id = generate_random_id()
    
    pay_url = create_crypto_invoice(price, callback.from_user.id, order_id)
    
    invoice_id = get_invoice_by_order_id(order_id)
    if not invoice_id:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    
    save_order(invoice_id, callback.from_user.id, city, district, product, price, status="–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã")
    
    text = (f"\U0001F6D2 –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{invoice_id}\n\n"
            f"{city}\n"
            f"{district}\n\n"
            f"\U0001F6AC –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {product}.\n\n"
            f"\U0001F4B8 –¶–µ–Ω–∞: {price} USDT.\n\n"
            f"\U0001F551 –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            f"\U0001F4CD –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã\n\n"
            f"‚è≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:")
    
    await callback.message.edit_text(text, reply_markup=payment_button(pay_url))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
@dp.callback_query(lambda c: c.data == "back_start")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.answer(START_MASSAGE, reply_markup=main_menu())  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞)
@dp.callback_query(lambda c: c.data.startswith("back_to_cities"))
async def back_to_cities(callback: types.CallbackQuery):
    await callback.message.edit_text("üá∞üá¨ –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ\n\n‚§µÔ∏è –í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:", reply_markup=city_selection())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞)
@dp.callback_query(lambda c: c.data == "back_to_districts")
async def back_to_districts(callback: types.CallbackQuery):
    await callback.message.edit_text("üá∞üá¨ –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ\n\n‚§µÔ∏è –í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:", reply_markup=city_selection())

async def monitor_invoices():
    while True:
        orders = load_csv_from_r2(ORDER_FILE)
        now = datetime.now()
        
        for order in orders:
            invoice_id, user_id, city, district, product, price, status, order_time = order
            order_datetime = datetime.strptime(order_time, "%Y-%m-%d %H:%M:%S")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–¥–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–º –º–µ–Ω—å—à–µ —á–∞—Å–∞
            if status == "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã" and now - order_datetime < timedelta(hours=1):
                paid = await check_payment_status(invoice_id, user_id, float(price))
                if paid:
                    order[6] = "‚úÖ –û–ø–ª–∞—á–µ–Ω–æ"
                    save_csv_to_r2(ORDER_FILE, orders)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    text = (f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{invoice_id} –æ–ø–ª–∞—á–µ–Ω!\n\n"
                            f"üèô –ì–æ—Ä–æ–¥: {city}\n"
                            f"üìç –†–∞–π–æ–Ω: {district}\n"
                            f"üõí –¢–æ–≤–∞—Ä: {product}\n"
                            f"üí∞ –¶–µ–Ω–∞: {price} USDT\n"
                            f"üïí –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {order_time}\n"
                            f"üìå –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
                    
                    try:
                        await bot.send_message(user_id, text)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
