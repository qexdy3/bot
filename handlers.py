from aiogram import types
from aiogram.filters import Command
from bot import dp
from config import CITIES, PRODUCTS, PRICES, CONTACTS_MASSAGE, START_MASSAGE, WORK_MASSAGE, LAW_MASSAGE, PRODUCT_MASSAGE
from keyboards import main_menu, city_selection, district_selection, product_selection, payment_button
from payment import create_crypto_invoice
import csv
import os
from datetime import datetime

CSV_FILE = "users.csv"
ORDER_FILE = "orders.csv"

def save_user(user_id, name, username):
    user_exists = False
    reg_date = datetime.now().strftime("%Y-%m-%d")
    if os.path.exists(CSV_FILE):
        with open(CSV_FILE, "r", newline="", encoding="utf-8") as file:
            reader = csv.reader(file)
            users = list(reader)
            for user in users:
                if user and str(user[0]) == str(user_id):
                    user_exists = True
                    break
    
    if not user_exists:
        with open(CSV_FILE, "a", newline="", encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerow([user_id, name, username, reg_date, 0, 0])

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    name = message.from_user.first_name
    username = message.from_user.username if message.from_user.username else "–ù–µ—Ç"
    
    save_user(user_id, name, username)
    
    await message.answer(START_MASSAGE, reply_markup=main_menu())

@dp.message(lambda message: message.text == "üö¨ –ö—É–ø–∏—Ç—å üö¨")
async def handle_buy_text(message: types.Message):
    await message.answer(f"üá∞üá¨ –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ\n\n‚§µÔ∏è –í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:", reply_markup=city_selection())

@dp.message(lambda message: message.text == "üö® –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def handle_contact_text(message: types.Message):
    await message.answer(CONTACTS_MASSAGE)

@dp.message(lambda message: message.text == "–†–∞–±–æ—Ç–∞ üòé")
async def handle_contact_text(message: types.Message):
    await message.answer(WORK_MASSAGE)

@dp.message(lambda message: message.text == "–ü—Ä–∞–≤–∏–ª–∞ üìö")
async def handle_contact_text(message: types.Message):
    await message.answer(LAW_MASSAGE)

@dp.message(lambda message: message.text == "‚úÖ –ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ —Ä–∞–π–æ–Ω–∞–º ‚úÖ")
async def handle_contact_text(message: types.Message):
    await message.answer(PRODUCT_MASSAGE)

@dp.message(lambda message: message.text == "‚åõÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤")
async def handle_order_text(message: types.Message):
    try:
        current_time = datetime.now()
        updated_orders = []
        valid_orders = []
        
        with open(ORDER_FILE, "r", newline="", encoding="utf-8") as file:
            reader = csv.reader(file)
            headers = next(reader)
            for row in reader:
                order_number = row[0]
                user_id = row[1]
                city = row[2]
                district = row[3]
                product = row[4]
                price = row[5]
                status = row[6]
                order_time = datetime.strptime(row[7], "%Y-%m-%d %H:%M:%S")
                
                # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞ –∏ —Å—Ç–∞—Ç—É—Å "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ (–Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
                if status == "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã" and (current_time - order_time).total_seconds() > 3600:
                    continue
                
                updated_orders.append(row)
                
                order_text = (f"üõí –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #300{order_number}\n\n"
                              f"üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
                              f"{city}\n"
                              f"{district}\n\n"
                              f"üö¨ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {product}\n\n"
                              f"üí∏ –¶–µ–Ω–∞: {price} USDT\n\n"
                              f"‚è≥ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {order_time.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                              f"üìå –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {status}\n")
                valid_orders.append(order_text)
        
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º CSV-—Ñ–∞–π–ª, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        with open(ORDER_FILE, "w", newline="", encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerow(headers)
            writer.writerows(updated_orders)
        
        if valid_orders:
            for order in valid_orders:
                await message.answer(order)
        else:
            await message.answer("–ó–∞–∫–∞–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")


@dp.message(lambda message: message.text == "–ü—Ä–æ—Ñ–∏–ª—å ü•∑")
async def handle_profile_text(message: types.Message):
    user_id = message.from_user.id
    
    if os.path.exists(CSV_FILE):
        with open(CSV_FILE, "r", newline="", encoding="utf-8") as file:
            reader = csv.reader(file)
            for row in reader:
                if row and str(row[0]) == str(user_id):
                    profile_text = (f"‚ÑπÔ∏è –ü—Ä–æ—Ñ–∏–ª—å\n\n"
                                    f"‚ù§Ô∏è –ò–º—è: {row[1]}\n"
                                    f"üòé –Æ–∑–µ—Ä: @{row[2] if row[2] != '–ù–µ—Ç' else '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
                                    f"üîë ID: {row[0]}\n"
                                    f"üÜï –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {row[3]}\n"
                                    f"üõí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {row[4]}\n"
                                    f"üí∞ –°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: {row[5]} $")
                    await message.answer(profile_text)
                    return
    
    await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@dp.callback_query(lambda c: c.data.startswith("city_"))
async def choose_district(callback: types.CallbackQuery):
    city = callback.data.split("_")[1]
    await callback.message.edit_text(
        f"üåÜ –ì–æ—Ä–æ–¥: {city}.\n\nüåÉ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",
        reply_markup=district_selection(city)
    )

@dp.callback_query(lambda c: c.data.startswith("district_"))
async def choose_product(callback: types.CallbackQuery):
    district = callback.data.split("_")[1]
    city = callback.message.text.split("\n")[0].replace("\ud83c\udf06 –ì–æ—Ä–æ–¥: ", "")
    
    await callback.message.edit_text(
        f"{city}\n\nüåÉ –†–∞–π–æ–Ω: {district}.\n\nüö¨ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=product_selection(district, PRODUCTS, PRICES)
    )

def generate_order_number():
    if not os.path.exists(ORDER_FILE):
        return 1
    
    with open(ORDER_FILE, "r", newline="", encoding="utf-8") as file:
        reader = csv.reader(file)
        orders = list(reader)
    
    return len(orders) + 1 if orders else 1

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
def save_order(order_number, user_id, city, district, product, price, status="–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"):
    order_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(ORDER_FILE, "a", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow([order_number, user_id, city, district, product, price, status, order_time])

@dp.callback_query(lambda c: c.data.startswith("product_"))
async def confirm_purchase(callback: types.CallbackQuery):
    product = callback.data.split("_")[1]
    price = PRICES.get(product)
    
    if not price:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    city = callback.message.text.split("\n")[0].replace("\ud83c\udf06 –ì–æ—Ä–æ–¥: ", "")
    district = callback.message.text.split("\n")[2].replace("\ud83c\udf03 –†–∞–π–æ–Ω: ", "")
    
    order_number = generate_order_number()
    order_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    save_order(order_number, callback.from_user.id, city, district, product, price, status="–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã")
    
    pay_url = create_crypto_invoice(price, callback.from_user.id, order_number)
    
    text = (f"üõí –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #300{order_number}\n\n"
            f"{city}\n"
            f"{district}\n\n"
            f"üö¨ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {product}.\n\n"
            f"üí∏ –¶–µ–Ω–∞: {price} USDT.\n\n"
            f"üïí –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {order_time}\n\n"
            f"üìå –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã\n\n"
            f"‚è≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:")
    
    await callback.message.edit_text(text, reply_markup=payment_button(pay_url))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
@dp.callback_query(lambda c: c.data == "back_start")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.answer(START_MASSAGE, reply_markup=main_menu())  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞)
@dp.callback_query(lambda c: c.data.startswith("back_to_cities"))
async def back_to_cities(callback: types.CallbackQuery):
    await callback.message.edit_text("üá∞üá¨ –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ\n\n‚§µÔ∏è –í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:", reply_markup=city_selection())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞)
@dp.callback_query(lambda c: c.data == "back_to_districts")
async def back_to_districts(callback: types.CallbackQuery):
    await callback.message.edit_text("üá∞üá¨ –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ\n\n‚§µÔ∏è –í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:", reply_markup=city_selection())
